var start;function tic(){start=Date.now()}function toc(){const millis=Date.now()-start;say(millis)}function fct_distance(pt_1,pt_2){let dist=Math.sqrt(Math.pow(pt_1[0]-pt_2[0],2)+Math.pow(pt_1[1]-pt_2[1],2));return dist}function create_matrix(m,n){let arr=new Array(m);for(var i=0;i<m;i++){arr[i]=new Array(n)}return arr}function getRandomArbitrary(min,max){return Math.random()*(max-min)+min}function randomDigit(min,max){return Math.floor(Math.random()*Math.floor(2))*(max-min)+min}function sayVecAlert(arr){alert(arr.join("\n"))}function sayAlert(arr){alert(arr)}function say(truc){console.log(truc)}function getRelativeMousePosition(event,target){target=target||event.target;var rect=target.getBoundingClientRect();return{x:event.clientX-rect.left,y:event.clientY-rect.top}}function get_value(value){return Object.assign({},value)}function getNoPaddingNoBorderCanvasRelativeMousePosition(event,target){target=target||event.target;var pos=getRelativeMousePosition(event,target);pos.x=pos.x*target.width/target.clientWidth;pos.y=pos.y*target.height/target.clientHeight;return pos}function get_mouse_pos(e,target){const pos=getNoPaddingNoBorderCanvasRelativeMousePosition(e,target);let value_1=pos.x/info.webgl.canvas.width*2-1;let value_2=pos.y/info.webgl.canvas.height*-2+1;info.value.mouse=[value_1,value_2]}function sort_by_indice(arr){var indices=new Array(arr.length);for(var k=0;k<arr.length;++k)indices[k]=k;indices.sort(function(a,b){return arr[a]<arr[b]?-1:arr[a]>arr[b]?1:0});return indices}var info={webgl:{canvas:0,context:0,mvp:mvp={projection:0,modelview:0,mvp:0}},shader:{program:0,attribut:{location:0,color:0},uniform:{in_mvp:0,point_size:5,is_point:false}},param:{nb_point:0,speed:0,line_dist_max:0,limit:0,mouse_area:0,collision_area:0,limitless:false},color:{bkg:0,dark_mode:false,primitiv_rgb:0,mouse_rgb:0,collision_rgb:0},value:{mouse:0}};var object={point:point={xy:0,rgb:0,nxy:0,size:0,draw:0,idx_anar:0,nb_point:0,vbo_xy:0,vbo_rgb:0},line:line={xy:0,rgb:0,nb_line:0,draw:0,vbo_xy:0,vbo_rgb:0}};function init_ui(){document.getElementById("cpt_points").value=info.param.nb_point;document.getElementById("point_manage_quantity").value=info.param.nb_point;document.getElementById("cpt_size").value=info.param.point_size;document.getElementById("slider_size").value=info.param.point_size;document.getElementById("cpt_speed").value=info.param.speed;document.getElementById("slider_speed").value=info.param.speed;document.getElementById("cpt_line_dist_max").value=info.param.line_dist_max;document.getElementById("slider_line_dist_max").value=info.param.line_dist_max}function runtime_ui(){let point_number=document.getElementById("point_manage_quantity").value;let point_size=document.getElementById("slider_size").value;let point_speed=document.getElementById("slider_speed").value;let line_dist_max=document.getElementById("slider_line_dist_max").value;let dark_mode=document.getElementById("checkbox_dm").checked;let limitless=document.getElementById("limitless").checked;document.getElementById("cpt_points").value=point_number;document.getElementById("cpt_size").value=point_size;document.getElementById("cpt_speed").value=point_speed;document.getElementById("cpt_line_dist_max").value=line_dist_max;if(dark_mode!=info.param.dark_mode){info.param.dark_mode=dark_mode;init_config(dark_mode)}if(limitless!=info.param.limitless){info.param.limitless=limitless}info.param.line_dist_max=line_dist_max;info.param.speed=point_speed;if(point_number!=info.param.nb_point){info.param.nb_point=point_number;point_manage_quantity()}if(point_size!=info.param.point_size){info.param.point_size=point_size;gl.uniform1f(info.shader.uniform.point_size,point_size)}}function compute_stats(){let P=1;let V=1*Math.pow(10,-20);let N=object.points.nb_point;let kb=1.38*Math.pow(10,-23);let T=P*V/(N*kb)}main();function main(){init_wgl_context();init_configuration();init_ui();init_shader();loop()}function init_wgl_context(){init_context();init_resize_canvas(info.webgl.canvas);init_viewport()}function init_context(){const canvas=document.querySelector("#glcanvas");const gl=canvas.getContext("webgl2");if(!gl){alert("Unable to initialize WebGL. Your browser or machine may not support it.");return}gl.enable(gl.DEPTH_TEST);info.webgl.context=gl;info.webgl.canvas=canvas;canvas.addEventListener("mousemove",event=>get_mouse_pos(event,canvas))}function init_viewport(){gl=info.webgl.context;gl.viewport(0,0,gl.canvas.width,gl.canvas.height)}function init_resize_canvas(canvas){const displayWidth=canvas.clientWidth;const displayHeight=canvas.clientHeight;const needResize=canvas.width!==displayWidth||canvas.height!==displayHeight;if(needResize){canvas.width=displayWidth;canvas.height=displayHeight}return needResize}function get_webgl_info(){say(gl.getParameter(gl.SHADING_LANGUAGE_VERSION));say(gl.getParameter(gl.VERSION))}function draw_object(data){gl=info.webgl.context;vbo_xy=data.vbo_xy;vbo_rgb=data.vbo_rgb;gl.bindBuffer(gl.ARRAY_BUFFER,vbo_xy);gl.vertexAttribPointer(info.shader.attribut.location,2,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(info.shader.attribut.location);gl.bindBuffer(gl.ARRAY_BUFFER,vbo_rgb);gl.vertexAttribPointer(info.shader.attribut.color,4,gl.FLOAT,false,0,0);gl.enableVertexAttribArray(info.shader.attribut.color);gl.drawArrays(data.draw,0,data.xy.length)}function create_object(data){gl=info.webgl.context;vbo_xy=data.vbo_xy;vbo_rgb=data.vbo_rgb;let XY=[];let RGB=[];for(let i=0;i<data.xy.length;i++){XY.push(data.xy[i][0]);XY.push(data.xy[i][1]);RGB.push(data.rgb[i][0]);RGB.push(data.rgb[i][1]);RGB.push(data.rgb[i][2]);RGB.push(data.rgb[i][3])}gl.bindBuffer(gl.ARRAY_BUFFER,vbo_xy);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(XY),gl.STREAM_DRAW);gl.bindBuffer(gl.ARRAY_BUFFER,vbo_rgb);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(RGB),gl.STREAM_DRAW)}function update_object(data){gl=info.webgl.context;vbo_xy=data.vbo_xy;vbo_rgb=data.vbo_rgb;let XY=[];let RGB=[];for(let i=0;i<data.xy.length;i++){XY.push(data.xy[i][0]);XY.push(data.xy[i][1]);RGB.push(data.rgb[i][0]);RGB.push(data.rgb[i][1]);RGB.push(data.rgb[i][2]);RGB.push(data.rgb[i][3])}gl.bindBuffer(gl.ARRAY_BUFFER,vbo_xy);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(XY),gl.STREAM_DRAW);gl.bindBuffer(gl.ARRAY_BUFFER,vbo_rgb);gl.bufferData(gl.ARRAY_BUFFER,new Float32Array(RGB),gl.STREAM_DRAW)}function create_buffer(data){data.vbo_xy=gl.createBuffer();data.vbo_rgb=gl.createBuffer()}function init_shader(){const[vs,fs]=create_shader();init_program(vs,fs);init_params()}function init_program(vs,fs){gl=info.webgl.context;const vertexShader=load_shader(gl,gl.VERTEX_SHADER,vs);const fragmentShader=load_shader(gl,gl.FRAGMENT_SHADER,fs);const program=gl.createProgram();gl.attachShader(program,vertexShader);gl.attachShader(program,fragmentShader);gl.linkProgram(program);if(!gl.getProgramParameter(program,gl.LINK_STATUS)){alert("Unable to initialize the shader program: "+gl.getinfoLog(program));return null}info.shader.program=program}function init_params(){gl=info.webgl.context;program=info.shader.program;info.shader.attribut.location=gl.getAttribLocation(program,"in_position");info.shader.attribut.color=gl.getAttribLocation(program,"in_color");info.shader.uniform.in_mvp=gl.getUniformLocation(program,"in_mvp");info.shader.uniform.is_point=gl.getUniformLocation(program,"is_point");info.shader.uniform.point_size=gl.getUniformLocation(program,"point_size")}function create_shader(){const shader_vertex=`#version 300 es

  in vec4 in_position;
  in vec4 in_color;
  out vec4 frag_color;
  uniform float point_size;

  void main(){
    gl_Position = in_position;
    gl_PointSize = point_size;

    frag_color = in_color;
  }
  `;const shader_fragment=`#version 300 es

  precision highp float;
  uniform bool is_point;
  in vec4 frag_color;
  out vec4 out_color;

  void main() {
    if(is_point){
      float r = 0.0, delta = 0.0, alpha = 1.0;
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      r = dot(cxy, cxy);
      if (r > 1.0) {
        discard;
      }
    }
    out_color = frag_color;
  }
  `;return[shader_vertex,shader_fragment]}function load_shader(gl,type,source){const shader=gl.createShader(type);gl.shaderSource(shader,source);gl.compileShader(shader);if(!gl.getShaderParameter(shader,gl.COMPILE_STATUS)){alert("An error occurred compiling the shaders: "+gl.getShaderInfoLog(shader));gl.deleteShader(shader);return null}return shader}function compute_mvp(){gl=info.webgl.context;const fieldOfView=90*Math.PI/180;const aspect=gl.canvas.clientWidth/gl.canvas.clientHeight;const zNear=.1;const zFar=100;const proj_mat=glMatrix.mat4.create();glMatrix.mat4.perspective(proj_mat,fieldOfView,aspect,zNear,zFar);const modelview_mat=glMatrix.mat4.create();info.webgl.mvp.projection=proj_mat;info.webgl.mvp.modelview=modelview_mat;info.webgl.mvp.mvp=modelview_mat}function init_points(nb_point){[XY,RGB,Nxy]=create_points(nb_point);object.point.xy=XY;object.point.rgb=RGB;object.point.nxy=Nxy;object.point.nb_point=nb_point;object.point.size=1;object.point.draw=gl.POINTS}function runtime_point(){for(let i=0;i<object.point.xy.length;i++){let point=object.point.xy[i];let normal=object.point.nxy[i];point_anarchiste(point,normal);point_displacment(point,normal,i);point_manage_limit(point,normal);point_recolorization(i)}}function add_points(nb_point){[XY,RGB,Nxy]=create_points(nb_point);object.point.xy=object.point.xy.concat(XY);object.point.rgb=object.point.rgb.concat(RGB);object.point.nxy=object.point.nxy.concat(Nxy);object.point.nb_point=object.point.xy.length;object.point.draw=gl.POINTS}function add_points_xy(xy){[XY,RGB,Nxy]=create_points(1);XY[0][0]+=xy[0]+Nxy[0][0]*.001;XY[0][1]+=xy[1]+Nxy[0][1]*.001;RGB[0]=[0,0,1,1];object.point.xy=object.point.xy.concat(XY);object.point.rgb=object.point.rgb.concat(RGB);object.point.nxy=object.point.nxy.concat(Nxy);object.point.nb_point=object.point.xy.length;object.point.draw=gl.POINTS}function create_points(nb_point){let lim_x=info.param.limit_inner_x;let lim_y=info.param.limit_inner_y;let rgb=info.color.rgb_obj;let XY=[];for(let i=0;i<nb_point;i++){let X=getRandomArbitrary(lim_x[0],lim_x[1]);let Y=getRandomArbitrary(lim_y[0],lim_y[1]);XY.push([X,Y])}let RGB=[];for(let i=0;i<nb_point;i++){RGB.push(rgb)}let Nxy=[];for(let i=0;i<nb_point;i++){let Nx=getRandomArbitrary(-1,1);let Ny=getRandomArbitrary(-1,1);Nxy.push([Nx,Ny])}return[XY,RGB,Nxy]}function create_points_bordure(){let X,Y;let rgb=get_value(info.color.rgb_obj);let topright=randomDigit(0,1);if(topright==0){X=getRandomArbitrary(info.param.limit_outer_x[0],info.param.limit_outer_x[1]);Y=randomDigit(info.param.limit_outer_y[0],info.param.limit_outer_y[1])}else if(topright==1){X=randomDigit(info.param.limit_outer_x[0],info.param.limit_outer_x[1]);Y=getRandomArbitrary(info.param.limit_outer_y[0],info.param.limit_outer_y[1])}say([X,Y]);object.point.xy.push([X,Y]);object.point.rgb.push(rgb);let Nx=getRandomArbitrary(-1,1);let Ny=getRandomArbitrary(-1,1);object.point.nxy.push([Nx,Ny])}function remove_point(nb_point){for(let i=0;i<nb_point;i++){object.point.xy.pop();object.point.nxy.pop();object.point.rgb.pop()}object.point.nb_point=object.point.xy.length}function remove_point_bordure(point){if(point[0]<info.param.limit_outer_x[0]||point[0]>info.param.limit_outer_x[1]||point[1]<info.param.limit_outer_y[0]||point[1]>info.param.limit_outer_y[1]){let idx=object.point.xy.indexOf(point);object.point.xy.splice(idx,1);object.point.nxy.splice(idx,1);object.point.rgb.splice(idx,1);object.point.nb_point=object.point.xy.length;create_points_bordure()}}function point_recolorization(i){let rgb_obj=info.color.rgb_obj;let rgb_pt=object.point.rgb[i];let rgb_rate=.025;for(let j=0;j<3;j++){let diff=rgb_obj[j]-rgb_pt[j];if(Math.abs(diff)<rgb_rate){rgb_pt[j]=rgb_obj[j]}else if(diff<0){rgb_pt[j]-=rgb_rate}else if(diff>0){rgb_pt[j]+=rgb_rate}}}function point_collision(dist,i){let collid_thres=info.param.collision_area;let collid_rgb=get_value(info.color.rgb_collid);let cpt_point_collision=0;if(dist<collid_thres){let Nx=getRandomArbitrary(-1,1);let Ny=getRandomArbitrary(-1,1);object.point.nxy[i]=[Nx,Ny];object.point.rgb[i]=collid_rgb}}function point_manage_quantity(){let nb_slider=info.param.nb_point;let diff=object.point.nb_point-nb_slider;if(diff>0){remove_point(diff)}else if(diff<0){add_points(-diff)}}function point_displacment(point,normal,i){let mouse_xy=info.value.mouse;let mouse_area=info.param.mouse_area;let rgb_mo=get_value(info.color.rgb_mouse);dist=fct_distance(point,mouse_xy);if(dist<mouse_area){point[0]+=(.2-dist)*(point[0]-mouse_xy[0])*.2+normal[0]*.001;point[1]+=(.2-dist)*(point[1]-mouse_xy[1])*.2+normal[1]*.001;object.point.rgb[i]=rgb_mo}else{point[0]+=normal[0]*info.param.speed;point[1]+=normal[1]*info.param.speed}}function point_manage_limit(point,normal){if(info.param.limitless){remove_point_bordure(point)}else{if(point[0]<info.param.limit_inner_x[0]){point[0]=info.param.limit_inner_x[0];normal[0]=-normal[0]}if(point[0]>info.param.limit_inner_x[1]){point[0]=info.param.limit_inner_x[1];normal[0]=-normal[0]}if(point[1]<info.param.limit_inner_y[0]){point[1]=info.param.limit_inner_y[0];normal[1]=-normal[1]}if(point[1]>info.param.limit_inner_y[1]){point[1]=info.param.limit_inner_y[1];normal[1]=-normal[1]}}}function point_anarchiste(point,normal){}function init_line(){object.line.draw=gl.LINES}function runtime_line(){let XY=[];let RGB=[];runtime_line_all(XY,RGB);runtime_mouse(XY,RGB);object.line.xy=XY;object.line.rgb=RGB;object.line.nb_line=XY.length}function runtime_line_all(XY,RGB){for(let i=0;i<object.point.xy.length;i++){let dist_vec=runtime_compute_distance(i);create_line_all(XY,RGB,dist_vec,i)}}function runtime_compute_distance(i){let dist_max=info.param.line_dist_max;let dist_vec=new Array;for(let j=i+1;j<object.point.xy.length;j++){let dist=fct_distance(object.point.xy[i],object.point.xy[j]);if(dist<dist_max){let dist_n=dist/dist_max;point_collision(dist,i);point_collision(dist,j);dist_vec.push([dist_n,j])}}return dist_vec}function runtime_mouse(XY,RGB){let rgb_mou=info.color.rgb_mouse;let rgb_bkg=info.color.rgb_bkg;for(let i=0;i<object.point.xy.length;i++){dist=fct_distance(object.point.xy[i],info.value.mouse);if(dist<.2){let dist_n=dist/.2;let r=dist_n*rgb_bkg[0]+(1-dist_n)*rgb_mou[0];let g=dist_n*rgb_bkg[1]+(1-dist_n)*rgb_mou[1];let b=dist_n*rgb_bkg[2]+(1-dist_n)*rgb_mou[2];let color=[r,g,b,1];XY.push(info.value.mouse);XY.push(object.point.xy[i]);RGB.push(color);RGB.push(color)}}}function create_line_all(XY,RGB,dist_vec,i){let rgb_obj=info.color.rgb_obj;let rgb_bkg=info.color.rgb_bkg;for(let j=0;j<dist_vec.length;j++){let dist_n=dist_vec[j][0];let r=dist_n*rgb_bkg[0]+(1-dist_n)*rgb_obj[0];let g=dist_n*rgb_bkg[1]+(1-dist_n)*rgb_obj[1];let b=dist_n*rgb_bkg[2]+(1-dist_n)*rgb_obj[2];let color=[r,g,b,1];XY.push(object.point.xy[i]);XY.push(object.point.xy[dist_vec[j][1]]);RGB.push(color);RGB.push(color)}}function runtime_line_knn(){let XY=[];let RGB=[];for(let i=0;i<object.point.xy.length;i++){let dist_vec=knn(i);create_line_knn(XY,RGB,dist_vec,i)}object.line.xy=XY;object.line.rgb=RGB;object.line.nb_line=XY.length}function create_line_knn(XY,RGB,dist_vec,i){let rgb=info.color.rgb_obj;let nb_link=info.param.nb_link;let dist_max=info.param.line_dist_max;if(dist_vec.length>=nb_link){for(let j=0;j<nb_link;j++){let dist=dist_vec[j][0];if(info.color.dark_mode==false){var alpha=-Math.log(dist/dist_max)-.5}else{var alpha=-Math.log(dist/dist_max)+.5}if(alpha>0){XY.push(object.point.xy[i]);XY.push(object.point.xy[dist_vec[j][1]]);RGB.push([rgb[0],rgb[1],rgb[2],alpha]);RGB.push([rgb[0],rgb[1],rgb[2],alpha])}}}}function knn(i){let dist_vec=new Array;for(let j=0;j<object.point.xy.length;j++){if(i!=j){let dist=fct_distance(object.point.xy[i],object.point.xy[j]);dist_vec.push([dist,j]);point_collision(dist,i)}}dist_vec.sort();return dist_vec}function loop(){let gl=info.webgl.context;init_object();init_scene();function render(){let rgb=info.color.rgb_bkg;gl.clearColor(rgb[0],rgb[1],rgb[2],rgb[3]);gl.clearDepth(1);gl.clear(gl.COLOR_BUFFER_BIT|gl.DEPTH_BUFFER_BIT);draw_scene();requestAnimationFrame(render)}requestAnimationFrame(render)}function draw_scene(){runtime_ui();runtime_point();runtime_line();draw_point();draw_line()}function init_object(){let point_number=info.param.nb_point;init_points(point_number);init_line();create_buffer(object.point);create_buffer(object.line);create_object(object.point);create_object(object.line)}function init_scene(){gl=info.webgl.context;compute_mvp();gl.useProgram(info.shader.program);gl.uniformMatrix4fv(info.shader.uniform.in_mvp,false,info.webgl.mvp.mvp);gl.uniform1f(info.shader.uniform.point_size,info.param.point_size)}function draw_point(){gl.uniform1i(info.shader.uniform.is_point,1);update_object(object.point);draw_object(object.point)}function draw_line(){gl.uniform1i(info.shader.uniform.is_point,0);update_object(object.line);draw_object(object.line)}function init_configuration(){init_parameter();init_config(info.color.dark_mode)}function init_parameter(){info.param.nb_point=50;info.param.nb_point=50;info.param.nb_link=3;info.param.speed=.001;info.param.point_size=5;info.param.line_dist_max=.5;info.param.mouse_area=.2;info.param.collision_area=.01;info.param.limitless=false;info.param.limit_inner_x=[-1,1];info.param.limit_inner_y=[-1,1];info.param.limit_outer_x=[-1.5,1.5];info.param.limit_outer_y=[-1.5,1.5];info.color.rgb_bkg=[1,1,1,1];info.color.rgb_obj=[0,0,0,1];info.color.rgb_mouse=[0,.7,.8,1];info.color.rgb_collid=[1,0,0,1];info.color.dark_mode=false;info.color.rgb_bkg_lm=[1,1,1,1];info.color.rgb_obj_lm=[0,0,0,1];info.color.rgb_bkg_dm=[.11,.13,.17,1];info.color.rgb_obj_dm=[1,1,1,1]}function init_config(dark_mode){let rgb_bkg_dm=get_value(info.color.rgb_bkg_dm);let rgb_obj_dm=get_value(info.color.rgb_obj_dm);let rgb_bkg_lm=get_value(info.color.rgb_bkg_lm);let rgb_obj_lm=get_value(info.color.rgb_obj_lm);if(dark_mode){info.color.dark_mode=true;info.color.rgb_bkg=rgb_bkg_dm;info.color.rgb_obj=rgb_obj_dm}else{info.color.dark_mode=false;info.color.rgb_bkg=rgb_bkg_lm;info.color.rgb_obj=rgb_obj_lm}}